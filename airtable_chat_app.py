import streamlit as st
st.write(st.secrets)
import streamlit as st
import openai
import requests

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å secrets.toml
AIRTABLE_API_KEY = st.secrets["AIRTABLE_API_KEY"]
AIRTABLE_BASE_ID = st.secrets["AIRTABLE_BASE_ID"]
AIRTABLE_TABLE_NAME = st.secrets["AIRTABLE_TABLE_NAME"]
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]

openai.api_key = OPENAI_API_KEY

# === GPT Setup ===
openai.api_key = st.secrets["OPENAI_API_KEY"]

# === Streamlit UI ===
st.set_page_config(page_title="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏õ‡∏†. ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó", page_icon="üí¨")
st.title("RTD1-bot: ‡πÅ‡∏ä‡∏ó‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏õ‡∏†.")

if "messages" not in st.session_state:
    st.session_state.messages = []

# === Chat Display ===
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# === Chat Input ===
prompt = st.chat_input("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô '‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å'")
if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Step 1: Query Airtable for name or keywords
    def query_airtable(keyword):
        url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
        headers = {"Authorization": f"Bearer {AIRTABLE_API_KEY}"}
        params = {"filterByFormula": f"FIND('{keyword}', {{‡∏ä‡∏∑‡πà‡∏≠ - ‡∏™‡∏Å‡∏∏‡∏•}})"}
        res = requests.get(url, headers=headers, params=params)
        return res.json().get("records", [])

    records = query_airtable(prompt)
    if records:
        info = records[0]["fields"]
        reply = f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: **{info.get('‡∏ä‡∏∑‡πà‡∏≠ - ‡∏™‡∏Å‡∏∏‡∏•', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠')}**\n\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {info.get('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '-')}, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: {info.get('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '-')}, ‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î: {info.get('‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î', '-')}"
    else:
        # Step 2: ‡∏ñ‡πâ‡∏≤ Airtable ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‚Üí ‡πÉ‡∏´‡πâ GPT ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡∏Å‡∏õ‡∏†."},
                *st.session_state.messages,
            ]
        )
        reply = response.choices[0].message.content

    # === Display reply ===
    st.session_state.messages.append({"role": "assistant", "content": reply})
    with st.chat_message("assistant"):
        st.markdown(reply)
