import streamlit as st
import openai
import requests

AIRTABLE_API_KEY = st.secrets["AIRTABLE_API_KEY"]
AIRTABLE_BASE_ID = st.secrets["AIRTABLE_BASE_ID"]
AIRTABLE_TABLE_NAME = st.secrets["AIRTABLE_TABLE_NAME"]
OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]

openai.api_key = OPENAI_API_KEY

st.set_page_config(page_title="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏õ‡∏†. ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó", page_icon="üí¨")
st.title("RTD1-bot: ‡πÅ‡∏ä‡∏ó‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏õ‡∏†.")

if "messages" not in st.session_state:
    st.session_state.messages = []

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

prompt = st.chat_input("‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏¥‡∏ï', '‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏°‡πà‡∏™‡∏≠‡∏î', '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' ...")
if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    def query_airtable(keyword):
        url = f"https://api.airtable.com/v0/{AIRTABLE_BASE_ID}/{AIRTABLE_TABLE_NAME}"
        headers = {"Authorization": f"Bearer {AIRTABLE_API_KEY}"}
        fields_to_search = [
            '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•',
            '‡∏£‡∏´‡∏±‡∏™',
            '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á',
            '‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î',
            '‡∏™‡∏≤‡∏Ç‡∏≤',
            '‡∏ú‡∏ä.‡πÄ‡∏Ç‡∏ï',
            '‡πÄ‡∏Ç‡∏ï',
            '‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô',
            '‡∏•‡∏≥‡∏î‡∏±‡∏ö',
            '‡∏ä‡∏±‡πâ‡∏ô',
            '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£',
            '‡∏ß‡∏î‡∏õ.‡∏î‡∏≥‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á',
            '‡∏ß‡∏î‡∏õ.‡∏ö‡∏£‡∏£‡∏à‡∏∏',
            '‡∏ß‡∏î‡∏õ.‡πÄ‡∏Å‡∏¥‡∏î',
            '‡∏õ‡∏µ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì',
            '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡∏™‡∏∏‡∏á‡∏™‡∏∏‡∏î',
            '‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
            'NO.ID Card',
            '‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏',
            '‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏',
        ]
        filter_formula = "OR(" + ",".join([f"FIND('{keyword}', {{{f}}})" for f in fields_to_search]) + ")"
        params = {"filterByFormula": filter_formula}
        res = requests.get(url, headers=headers, params=params)
        return res.json().get("records", [])

    records = query_airtable(prompt)
    if records:
        info = records[0]["fields"]
        reply = f"""‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô

**‡∏•‡∏≥‡∏î‡∏±‡∏ö:** {info.get('‡∏•‡∏≥‡∏î‡∏±‡∏ö', '-')}
**‡∏£‡∏´‡∏±‡∏™:** {info.get('‡∏£‡∏´‡∏±‡∏™', '-')}
**‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:** {info.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', '-')}
**‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:** {info.get('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '-')}
**‡∏ä‡∏±‡πâ‡∏ô:** {info.get('‡∏ä‡∏±‡πâ‡∏ô', '-')}
**‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£:** {info.get('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£', '-')}
**‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î:** {info.get('‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î', '-')}
**‡∏™‡∏≤‡∏Ç‡∏≤:** {info.get('‡∏™‡∏≤‡∏Ç‡∏≤', '-')}
**‡∏ú‡∏ä.‡πÄ‡∏Ç‡∏ï:** {info.get('‡∏ú‡∏ä.‡πÄ‡∏Ç‡∏ï', '-')}
**‡πÄ‡∏Ç‡∏ï:** {info.get('‡πÄ‡∏Ç‡∏ï', '-')}
**‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô:** {info.get('‡∏™‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', '-')}
**‡∏ß‡∏î‡∏õ.‡∏î‡∏≥‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:** {info.get('‡∏ß‡∏î‡∏õ.‡∏î‡∏≥‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '-')}
**‡∏ß‡∏î‡∏õ.‡∏ö‡∏£‡∏£‡∏à‡∏∏:** {info.get('‡∏ß‡∏î‡∏õ.‡∏ö‡∏£‡∏£‡∏à‡∏∏', '-')}
**‡∏ß‡∏î‡∏õ.‡πÄ‡∏Å‡∏¥‡∏î:** {info.get('‡∏ß‡∏î‡∏õ.‡πÄ‡∏Å‡∏¥‡∏î', '-')}
**‡∏õ‡∏µ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì:** {info.get('‡∏õ‡∏µ‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì', '-')}
**‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡∏™‡∏∏‡∏á‡∏™‡∏∏‡∏î:** {info.get('‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡∏™‡∏∏‡∏á‡∏™‡∏∏‡∏î', '-')}
**‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:** {info.get('‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '-')}
**NO.ID Card:** {info.get('NO.ID Card', '-')}
**‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏:** {info.get('‡∏Ñ‡∏∏‡∏ì‡∏ß‡∏∏‡∏í‡∏¥‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏', '-')}
**‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏:** {info.get('‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏£‡∏Å‡∏ö‡∏£‡∏£‡∏à‡∏∏', '-')}
"""
    else:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£ ‡∏Å‡∏õ‡∏†."},
                *st.session_state.messages,
            ]
        )
        reply = response.choices[0].message.content

    st.session_state.messages.append({"role": "assistant", "content": reply})
    with st.chat_message("assistant"):
        st.markdown(reply)
